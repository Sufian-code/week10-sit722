name: CD - Deploy to AKS

on:
  workflow_dispatch:
    inputs:
      aks_cluster_name:
        description: 'AKS cluster name'
        required: true
        type: string
      aks_resource_group:
        description: 'AKS resource group'
        required: true
        type: string

env:
  ACR_FULL: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  # trimmed registry name for AKS attach
  ACR_NAME: ${{ secrets.AZURE_CONTAINER_REGISTRY }}  # will trim in script

jobs:
  deploy-backend:
    runs-on: ubuntu-latest

    outputs:
      customer_service_ip: ${{ steps.get_ips.outputs.customer_ip }}
      product_service_ip: ${{ steps.get_ips.outputs.product_ip }}
      order_service_ip: ${{ steps.get_ips.outputs.order_ip }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_FULL }}

      - name: Trim ACR name for AKS
        id: trim_acr
        run: |
          ACR_ONLY=$(echo "${{ env.ACR_FULL }}" | sed 's/\.azurecr\.io//')
          echo "ACR_ONLY=$ACR_ONLY" >> $GITHUB_ENV

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ github.event.inputs.aks_resource_group }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}

      - name: Attach ACR to AKS
        run: |
          echo "Attaching ACR $ACR_ONLY to AKS cluster..."
          az aks update \
            --name ${{ github.event.inputs.aks_cluster_name }} \
            --resource-group ${{ github.event.inputs.aks_resource_group }} \
            --attach-acr $ACR_ONLY

      - name: Deploy backend infrastructure
        run: |
          cd k8s/
          kubectl apply -f configmaps.yaml
          kubectl apply -f secrets.yaml
          kubectl apply -f product-db.yaml
          kubectl apply -f order-db.yaml
          kubectl apply -f customer-db.yaml

      - name: Deploy backend services
        run: |
          cd k8s/
          kubectl apply -f product-service.yaml
          kubectl apply -f order-service.yaml
          kubectl apply -f customer-service.yaml

      - name: Get backend LoadBalancer IPs
        id: get_ips
        run: |
          echo "Waiting for LoadBalancer IPs (up to 180s)..."
          for svc in product-service order-service customer-service; do
            for i in {1..36}; do
              IP=$(kubectl get svc $svc -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || echo "")
              if [ -n "$IP" ]; then
                echo "$svc IP found: $IP"
                break
              fi
              sleep 5
            done
            if [ -z "$IP" ]; then
              echo "ERROR: $svc LoadBalancer IP not assigned"
              exit 1
            fi
            case $svc in
              product-service) echo "product_ip=$IP" >> $GITHUB_OUTPUT ;;
              order-service) echo "order_ip=$IP" >> $GITHUB_OUTPUT ;;
              customer-service) echo "customer_ip=$IP" >> $GITHUB_OUTPUT ;;
            esac
          done

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_FULL }}

      - name: Inject Backend IPs into Frontend main.js
        run: |
          sed -i "s|_PRODUCT_API_URL_|http://${{ needs.deploy-backend.outputs.product_service_ip }}:8000|g" frontend/main.js
          sed -i "s|_ORDER_API_URL_|http://${{ needs.deploy-backend.outputs.order_service_ip }}:8001|g" frontend/main.js
          sed -i "s|_CUSTOMER_API_URL_|http://${{ needs.deploy-backend.outputs.customer_service_ip }}:8002|g" frontend/main.js
          echo "--- Modified main.js ---"
          grep -E "http://" frontend/main.js || echo "No URLs found"

      - name: Build and Push Frontend
        run: |
          docker build -t ${{ env.ACR_FULL }}/frontend:latest ./frontend/
          docker push ${{ env.ACR_FULL }}/frontend:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ github.event.inputs.aks_resource_group }}
          cluster-name: ${{ github.event.inputs.aks_cluster_name }}

      - name: Dry-run frontend deployment
        run: |
          cd k8s/
          kubectl apply --dry-run=client -o yaml -f frontend.yaml

      - name: Deploy frontend
        run: |
          cd k8s/
          kubectl apply -f frontend.yaml
