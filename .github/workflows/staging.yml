name: Staging Deployment - Temporary Environment

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

env:
  STAGING_NAMESPACE: staging-${{ github.run_id }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  deploy-and-test-staging:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Create temporary staging namespace
        run: |
          echo "Creating temporary staging namespace: ${{ env.STAGING_NAMESPACE }}"
          kubectl create namespace ${{ env.STAGING_NAMESPACE }}
          echo "✅ Staging namespace created successfully"

      - name: Deploy entire application to staging
        run: |
          echo "Deploying complete application stack to staging..."
          kubectl apply -f k8s/ -n ${{ env.STAGING_NAMESPACE }}
          echo "✅ Application deployed to staging"

      - name: Wait for deployments rollout
        run: |
          echo "Waiting for all deployments to finish rollout..."
          kubectl rollout status deployment/frontend -n ${{ env.STAGING_NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/product-service -n ${{ env.STAGING_NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/order-service -n ${{ env.STAGING_NAMESPACE }} --timeout=300s
          kubectl rollout status deployment/customer-service -n ${{ env.STAGING_NAMESPACE }} --timeout=300s
          echo "✅ All deployments rolled out successfully!"

      - name: Run automated smoke tests
        run: |
          echo "Running automated smoke tests on staging environment..."

          # Create the test pod
          kubectl run smoke-tests \
            --image=curlimages/curl:8.5.0 \
            --restart=Never \
            --namespace=${{ env.STAGING_NAMESPACE }} \
            --command -- sleep 300

          # Wait until the test pod is ready
          kubectl wait --for=condition=Ready pod/smoke-tests \
            -n ${{ env.STAGING_NAMESPACE }} --timeout=60s

          echo "Testing frontend..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} smoke-tests -- curl -fs http://frontend:80/ || exit 1

          echo "Testing product-service..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} smoke-tests -- curl -fs http://product-service:8000/health || exit 1

          echo "Testing order-service..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} smoke-tests -- curl -fs http://order-service:8001/health || exit 1

          echo "Testing customer-service..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} smoke-tests -- curl -fs http://customer-service:8002/health || exit 1

          echo "Testing product API..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} smoke-tests -- curl -fs http://product-service:8000/products/ || exit 1

          echo "Testing order API..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} smoke-tests -- curl -fs http://order-service:8001/orders/ || exit 1

          echo "Testing customer API..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} smoke-tests -- curl -fs http://customer-service:8002/customers/ || exit 1

          echo "✅ All smoke tests passed!"

          # Cleanup smoke test pod
          kubectl delete pod smoke-tests -n ${{ env.STAGING_NAMESPACE }} --ignore-not-found


      - name: Collect pod logs on failure
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          kubectl logs -n ${{ env.STAGING_NAMESPACE }} --all-containers --selector=app > staging-logs.txt || true
        continue-on-error: true

      - name: Upload logs as artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: staging-logs
          path: staging-logs.txt

      - name: Destroy temporary staging environment
        if: always()
        run: |
          echo "Destroying temporary staging namespace: ${{ env.STAGING_NAMESPACE }}"
          kubectl delete namespace ${{ env.STAGING_NAMESPACE }} --ignore-not-found=true
          echo "✅ Staging environment destroyed successfully"

      - name: Logout from Azure
        if: always()
        run: az logout
