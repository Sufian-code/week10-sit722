name: Staging Deployment - Temporary Environment

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:  # Allow manual triggers

env:
  STAGING_NAMESPACE: staging-${{ github.run_id }}
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  deploy-and-test-staging:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set Kubernetes context
        uses: azure/aks-set-context@v3
        with:
          resource-group: ${{ secrets.AKS_RESOURCE_GROUP }}
          cluster-name: ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Create temporary staging namespace
        run: |
          echo "Creating temporary staging namespace: ${{ env.STAGING_NAMESPACE }}"
          kubectl create namespace ${{ env.STAGING_NAMESPACE }}
          echo "✅ Staging namespace created successfully"

      - name: Deploy entire application to staging
        run: |
          echo "Deploying complete application stack to staging..."
          kubectl apply -f k8s/ -n ${{ env.STAGING_NAMESPACE }}
          echo "✅ Application deployed to staging"

      - name: Wait for all pods to be ready
        run: |
          echo "Waiting for all pods in namespace ${{ env.STAGING_NAMESPACE }}..."
          kubectl wait --for=condition=ready pod -l app -n ${{ env.STAGING_NAMESPACE }} --timeout=300s
          echo "✅ All pods are ready!"

      - name: Run automated smoke tests
        run: |
          set -euo pipefail
          echo "Running automated smoke tests on staging environment..."
          
          FRONTEND_POD=$(kubectl get pod -n ${{ env.STAGING_NAMESPACE }} -l app=frontend -o jsonpath='{.items[0].metadata.name}')
          PRODUCT_POD=$(kubectl get pod -n ${{ env.STAGING_NAMESPACE }} -l app=product-service -o jsonpath='{.items[0].metadata.name}')
          ORDER_POD=$(kubectl get pod -n ${{ env.STAGING_NAMESPACE }} -l app=order-service -o jsonpath='{.items[0].metadata.name}')
          CUSTOMER_POD=$(kubectl get pod -n ${{ env.STAGING_NAMESPACE }} -l app=customer-service -o jsonpath='{.items[0].metadata.name}')

          echo "Testing frontend..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} $FRONTEND_POD -- curl -v http://localhost:80/ || { echo "❌ Frontend failed"; exit 1; }

          echo "Testing product-service..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} $PRODUCT_POD -- curl -v http://localhost:8000/health || { echo "❌ Product-service failed"; exit 1; }

          echo "Testing order-service..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} $ORDER_POD -- curl -v http://localhost:8001/health || { echo "❌ Order-service failed"; exit 1; }

          echo "Testing customer-service..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} $CUSTOMER_POD -- curl -v http://localhost:8002/health || { echo "❌ Customer-service failed"; exit 1; }

          echo "Testing product API..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} $PRODUCT_POD -- curl -v http://localhost:8000/products/ || { echo "❌ Product API failed"; exit 1; }

          echo "Testing order API..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} $ORDER_POD -- curl -v http://localhost:8001/orders/ || { echo "❌ Order API failed"; exit 1; }

          echo "Testing customer API..."
          kubectl exec -n ${{ env.STAGING_NAMESPACE }} $CUSTOMER_POD -- curl -v http://localhost:8002/customers/ || { echo "❌ Customer API failed"; exit 1; }

          echo "✅ All smoke tests passed!"

      - name: Collect pod logs on failure
        if: failure()
        run: |
          echo "Collecting logs for debugging..."
          kubectl logs -n ${{ env.STAGING_NAMESPACE }} --all-containers --selector=app > staging-logs.txt || true
        continue-on-error: true

      - name: Upload logs as artifact
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: staging-logs
          path: staging-logs.txt

      - name: Destroy temporary staging environment
        if: always()
        run: |
          echo "Destroying temporary staging namespace: ${{ env.STAGING_NAMESPACE }}"
          kubectl delete namespace ${{ env.STAGING_NAMESPACE }} --ignore-not-found=true
          echo "✅ Staging environment destroyed successfully"

      - name: Logout from Azure
        if: always()
        run: az logout
