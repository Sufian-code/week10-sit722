name: CI Pipeline - Test, Build and Push Images

on:
  push:
    branches: [ testing ]
  workflow_dispatch:  # Allow manual triggers

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}
  IMAGE_TAG: ${{ github.sha }}-${{ github.run_id }}

jobs:
  # Job 1: Run tests for all backend services
  test-backend-services:
    runs-on: ubuntu-latest
    services:
      # Customer DB container
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      # Product DB container
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5433:5432
      
      # Order DB container
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5434:5432

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          # Install dependencies for all backend services
          for service in customer_service order_service product_service; do
            if [ -f "backend/$service/requirements-dev.txt" ]; then
              echo "Installing dependencies for $service"
              pip install -r "backend/$service/requirements-dev.txt"
              pip install -r "backend/$service/requirements.txt"
            fi
          done
          # Install CI tools
          pip install pytest httpx

      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -v

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -v

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -v

  # Job 2: Build and Push Docker Images (runs only if tests pass)
  build-and-push-images:
    runs-on: ubuntu-latest
    needs: test-backend-services
    strategy:
      matrix:
        service: [customer_service, order_service, product_service, frontend]
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to Azure Container Registry
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      - name: Build Docker image for ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend/
          else
            docker build -t ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest ./backend/${{ matrix.service }}/
          fi

      - name: Push Docker image for ${{ matrix.service }}
        run: |
          if [ "${{ matrix.service }}" = "frontend" ]; then
            docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest
          else
            docker push ${{ env.ACR_LOGIN_SERVER }}/${{ matrix.service }}:latest
          fi

      - name: Logout from Azure
        run: az logout
        if: always()

  # Job 3: Frontend Linting (Optional but recommended)
  lint-frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Check frontend file structure
        run: |
          echo "Frontend structure:"
          ls -la frontend/
          echo "Main.js content:"
          cat frontend/main.js || echo "No main.js found"

  # Job 4: Validate Kubernetes Manifests
  validate-k8s-manifests:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Validate Kubernetes YAML files
        run: |
          echo "Validating Kubernetes manifests..."
          kubectl apply --dry-run=client -f k8s/ --validate=true
        continue-on-error: true  # Continue even if validation fails for review