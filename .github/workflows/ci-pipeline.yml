name: CI Pipeline

on:
  push:
    branches:
      - testing
  workflow_dispatch:

env:
  ACR_LOGIN_SERVER: ${{ secrets.AZURE_CONTAINER_REGISTRY }}

jobs:
  test_and_lint_backends:
    runs-on: ubuntu-latest

    services:
      # Product DB
      product_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: products
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Order DB
      order_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: orders
        ports:
          - 5433:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Customer DB
      customer_db:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: customers
        ports:
          - 5434:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install base dependencies
        run: |
          pip install --upgrade pip
          # Loop through each backend service folder
          for req in backend/*/requirements-dev.txt; do
            echo "Installing $req"
            pip install -r "$req"
          done
          # Install CI tools
          pip install pytest httpx

      - name: Run product_service tests
        working-directory: backend/product_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_DB: products
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      - name: Run order_service tests
        working-directory: backend/order_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5433
          POSTGRES_DB: orders
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          PRODUCT_SERVICE_URL: http://placeholder-product-service
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

      - name: Run customer_service tests
        working-directory: backend/customer_service
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5434
          POSTGRES_DB: customers
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        run: |
          pytest tests --maxfail=1 --disable-warnings -q

  build_and_push_images:
    runs-on: ubuntu-latest
    needs: test_and_lint_backends

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Login to ACR
        run: az acr login --name ${{ env.ACR_LOGIN_SERVER }}

      # Dry-run builds
      - name: Dry-run Product Service build
        run: docker build --tag product_service:dryrun ./backend/product_service

      - name: Dry-run Order Service build
        run: docker build --tag order_service:dryrun ./backend/order_service

      - name: Dry-run Customer Service build
        run: docker build --tag customer_service:dryrun ./backend/customer_service

      - name: Dry-run Frontend build
        run: docker build --tag frontend:dryrun ./frontend

      # Actual builds + push
      - name: Build & Push Product Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/product_service:latest ./backend/product_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/product_service:latest

      - name: Build & Push Order Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/order_service:latest ./backend/order_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/order_service:latest

      - name: Build & Push Customer Service
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest ./backend/customer_service
          docker push ${{ env.ACR_LOGIN_SERVER }}/customer_service:latest

      - name: Build & Push Frontend
        run: |
          docker build -t ${{ env.ACR_LOGIN_SERVER }}/frontend:latest ./frontend
          docker push ${{ env.ACR_LOGIN_SERVER }}/frontend:latest

      - name: Logout from Azure
        run: az logout
        if: always()
